%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 346
%%HiResBoundingBox: 0 0 2371.9199 345.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 345.12 re
W
q
[0.24 0 0 -0.24 0 345.12] cm
q
0 0 9883.333 1434.67737 re
W*
q
[14.93321 0 0 14.927937 178.77507 -23.614712] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
75.195 72.959999 m
74.575996 72.959999 73.954002 72.75 73.445 72.32 c
72.298996 71.352997 72.153999 69.639 73.121002 68.492996 c
88.730003 49.999996 l
73.122002 31.507 l
72.154999 30.361 72.300003 28.648001 73.445999 27.68 c
74.592003 26.712 76.305 26.857 77.273003 28.003 c
94.360001 48.248001 l
95.213997 49.260002 95.213997 50.740002 94.360001 51.750999 c
77.272003 71.995003 l
76.735001 72.632004 75.968002 72.959999 75.195 72.959999 c
h
f
24.805 72.959999 m
24.033001 72.959999 23.266001 72.631996 22.729 71.996002 c
5.641 51.751999 l
4.787 50.739998 4.787 49.259998 5.641 48.249001 c
22.729 28.004 l
23.696001 26.858 25.41 26.712999 26.556 27.68 c
27.702 28.647001 27.847 30.361 26.879999 31.507 c
11.269 50.000999 l
26.878 68.492996 l
27.845001 69.639 27.701 71.351997 26.555 72.32 c
26.045 72.749001 25.423 72.959999 24.805 72.959999 c
h
f
37.325001 72.959999 m
36.833 72.959999 36.334999 72.825996 35.887001 72.545998 c
34.616001 71.75 34.23 70.074997 35.026001 68.804001 c
60.369999 28.315001 l
61.166 27.044001 62.841999 26.659 64.112999 27.454 c
65.384003 28.25 65.769997 29.925001 64.973999 31.196001 c
39.630001 71.684998 l
39.115002 72.508003 38.23 72.959999 37.325001 72.959999 c
h
f
Q
q
[53.469299 0 0 53.450417 2039.3822 -56.664028] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
10.22 6 m
13.440001 6 l
13.440001 20 l
10.980001 20 l
4.420001 11.86 l
4.420001 20 l
1.200001 20 l
1.200001 6 l
3.700001 6 l
10.22 14.14 l
10.22 6 l
h
20.82 9.42 m
23.18 9.42 26.299999 11.2 26.299999 14.84 c
26.299999 18.5 23.18 20.200001 20.82 20.200001 c
18.459999 20.200001 15.34 18.5 15.34 14.84 c
15.34 11.2 18.459999 9.42 20.82 9.42 c
h
20.82 12.2 m
19.619999 12.2 18.4 13.12 18.4 14.84 c
18.4 16.5 19.619999 17.42 20.82 17.42 c
22.02 17.42 23.26 16.5 23.26 14.84 c
23.26 13.12 22.02 12.2 20.82 12.2 c
h
46.02 18.5 m
44.760002 19.620001 43.119999 20.200001 41.220001 20.200001 c
37.260002 20.200001 33.900002 17.26 33.900002 13.000001 c
33.900002 8.740002 37.260002 5.800001 41.220001 5.800001 c
43.100002 5.800001 44.720001 6.400001 45.940002 7.460001 c
44.000004 9.640001 l
43.300003 9.160002 42.360004 8.820002 41.420006 8.820002 c
38.960007 8.820002 37.260006 10.580002 37.260006 13.000002 c
37.260006 15.420002 38.960007 17.180002 41.420006 17.180002 c
42.400005 17.180002 43.400005 16.800003 44.100006 16.240002 c
46.02 18.5 l
h
50.900002 5.86 m
50.900002 20 l
47.740002 20 l
47.740002 5.86 l
50.900002 5.86 l
50.900002 5.86 l
h
58.099998 9.42 m
60.459999 9.42 63.579998 11.2 63.579998 14.84 c
63.579998 18.5 60.459999 20.200001 58.099998 20.200001 c
55.739998 20.200001 52.619999 18.5 52.619999 14.84 c
52.619999 11.2 55.739998 9.42 58.099998 9.42 c
h
58.099998 12.2 m
56.899998 12.2 55.68 13.12 55.68 14.84 c
55.68 16.5 56.900002 17.42 58.099998 17.42 c
59.299995 17.42 60.539997 16.5 60.539997 14.84 c
60.539997 13.12 59.299995 12.2 58.099998 12.2 c
h
70.419998 9.42 m
72.32 9.42 73.919998 10.22 74.900002 11.9 c
72.5 13.04 l
71.980003 12.6 71.559998 12.2 70.459999 12.2 c
69.260002 12.2 68.040001 13.12 68.040001 14.82 c
68.040001 16.5 69.260002 17.379999 70.459999 17.379999 c
71.559998 17.379999 71.979996 17.019999 72.5 16.58 c
74.940002 17.719999 l
73.920006 19.4 72.360001 20.16 70.420006 20.16 c
68.100006 20.16 64.980003 18.5 64.980003 14.82 c
64.980003 11.2 68.100006 9.42 70.420006 9.42 c
70.419998 9.42 l
h
83.760002 20 m
80.380005 15.96 l
79.720001 16.66 l
79.720001 20 l
76.559998 20 l
76.559998 16.219999 l
76.559998 5.86 l
79.720001 5.86 l
79.720001 12.799999 l
82.660004 9.599999 l
86.440002 9.599999 l
82.32 13.94 l
87.360001 20 l
83.760002 20 l
h
93.720001 12.88 m
93.440002 12.16 93.020004 11.92 92.559998 11.92 c
92.139999 11.92 91.720001 12.16 91.720001 12.56 c
91.720001 12.940001 91.959999 13.160001 92.419998 13.320001 c
93.739998 13.780001 l
95.220001 14.320001 96.720001 14.860001 96.720001 16.940001 c
96.720001 19.040001 94.620003 20.24 92.459999 20.24 c
90.519997 20.24 88.699997 19.1 88.260002 17.279999 c
90.740005 16.499998 l
91.000008 17.079998 91.460007 17.739998 92.460007 17.739998 c
93.140007 17.739998 93.580009 17.299997 93.580009 16.899998 c
93.580009 16.699997 93.420006 16.439999 92.920006 16.239998 c
91.700005 15.799998 l
89.620003 15.039998 88.640007 13.979999 88.640007 12.499998 c
88.640007 10.559998 90.44001 9.419998 92.420006 9.419998 c
94.440002 9.419998 95.780006 10.519999 96.380005 12.179998 c
93.720001 12.88 l
h
97.32 23.219999 m
99.279999 17.639999 l
101.900002 17.639999 l
100.060005 23.219999 l
97.320007 23.219999 l
97.32 23.219999 l
h
112.279999 17.040001 m
117.599998 17.040001 l
117.599998 20 l
109.059998 20 l
109.059998 6 l
112.279999 6 l
112.279999 17.040001 l
h
122.82 17.040001 m
128.139999 17.040001 l
128.139999 20 l
119.599998 20 l
119.599998 6 l
122.82 6 l
122.82 17.040001 l
h
141.960007 18.5 m
140.700012 19.620001 139.060013 20.200001 137.160004 20.200001 c
133.199997 20.200001 129.839996 17.26 129.839996 13.000001 c
129.839996 8.740002 133.199997 5.800001 137.160004 5.800001 c
139.040009 5.800001 140.660004 6.400001 141.880005 7.460001 c
139.940002 9.640001 l
139.240005 9.160002 138.300003 8.820002 137.360001 8.820002 c
134.899994 8.820002 133.199997 10.580002 133.199997 13.000002 c
133.199997 15.420002 134.899994 17.180002 137.360001 17.180002 c
138.339996 17.180002 139.339996 16.800003 140.039993 16.240002 c
141.960007 18.5 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
